#!/usr/bin/env bash

#region helper functions
basename() {
  : "${1%/}"
  printf '%s\n' "${_##*/}"
}

regex() {
  [[ $1 =~ $2 ]] && printf '%s\n' "${BASH_REMATCH[1]}"
}

show_help() {
  name=$(basename "${0}")
  cat <<EOF
${name} will search the "Name" tag of your EC2 instances for the given QUERY
and will ssh to the private IP of the first instance it finds.

If the QUERY is prefixed with a REMOTE_USER@ then it will attempt to SSH in
as that REMOTE_USER.

Usage:
  ${name} [options] [REMOTE_USER@]QUERY
  ${name} -h | --help | -?

Options:
  -a, --all             Sequentially SSH to all instances found in query
  -w, --when-available  Tries port knocking before SSHing in
  -h, --help, -?        Show this help message
EOF
  exit 0
}
#endregion helper functions

#region options parsing
[[ $# -eq 0 ]] && show_help

# Option defaults
result_index=0
when_available='false'

# Options parsing
POSITIONAL=()
while [[ $# -gt 0 ]]; do
  case $1 in
    -\?|-h|--help)
      show_help
      exit 0
      ;;
    -a|--all)
      result_index=''
      shift
      ;;
    -w|--when-available)
      when_available='true'
      shift
      ;;
    *)
      POSITIONAL+=("$1")
      shift
  esac
done
set -- "${POSITIONAL[@]}"
#endregion options parsing

#region requirements
require() {
  name="${2:-${1}}"
  command -v "${1}" >/dev/null 2>&1 || {
    printf 'The %s tool is required to use this script!\n' "${name}" >&2
    [[ -z "${3}" ]] || printf '\tSee: %s\n' "${3}" >&2
    exit 1
  }
}

require 'aws' 'AWS CLI' 'https://docs.aws.amazon.com/cli/latest/userguide/installing.html'
require 'jq' 'jq' 'https://stedolan.github.io/jq/download/'
[[ "${when_available}" = "true" ]] && require 'sshwa' 'sshwa' 'https://github.com/andres-rojas/homebrew-keg/blob/master/sshwa.rb'
#endregion requirements

#region main
# Stop macOS from taking over BASH_REMATCH
[[ ${OSTYPE} =~ ^darwin ]] && unset PROMPT_COMMAND

if [[ $1 =~ @ ]]; then
  remote_user=$(regex "${1}" "^(.*)@.*$")
  host=$(regex "${1}" "^.*@(.*)$")
else
  host="${1}"
fi

# shellcheck disable=SC2086
for ip in $(aws ec2 describe-instances --filters Name=tag:Name,Values=*${host}* --query 'Reservations[*].Instances[*].PrivateIpAddress[]' | jq -r .[${result_index}]); do
  if [[ -n "${remote_user}" ]]; then
    [[ "${when_available}" = "true" ]] && sshwa "${remote_user}@${ip}" || ssh "${remote_user}@${ip}"
  else
    [[ "${when_available}" = "true" ]] && sshwa "${ip}" || ssh "${ip}"
  fi
done

exit 0
#endregion main
