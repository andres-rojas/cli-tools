#!/usr/bin/env bash

#region helper functions
basename() {
  : "${1%/}"
  printf '%s\n' "${_##*/}"
}

cd_error() {
  # shellcheck disable=SC1117
  printf "Can't access path: %s\n" "${1}"
  exit 1
}

show_help() {
  name=$(basename "${0}")
  cat <<EOF
${name} parses the given Git repository with cloc

Usage:
  ${name} REPO_PATH...
  ${name} -h | --help | -?

Options:
  -h, --help, -?  Show this help message
EOF
  exit 0
}
#endregion helper functions

#region options parsing
# Options parsing
POSITIONAL=()
while [[ $# -gt 0 ]]; do
  case $1 in
    -\?|-h|--help)
      show_help
      ;;
    *)
      POSITIONAL+=("$1")
      shift
  esac
done
set -- "${POSITIONAL[@]}"

[[ $# -eq 0 ]] && show_help
#endregion options parsing

#region requirements
require() {
  name="${2:-${1}}"
  command -v "${1}" >/dev/null 2>&1 || {
    printf 'The %s tool is required to use this script!\n' "${name}" >&2
    [[ -z "${3}" ]] || printf '\tSee: %s\n' "${3}" >&2
    exit 1
  }
}

require 'cloc' 'cloc' 'https://github.com/AlDanial/cloc/'
require 'git' 'git' 'https://git-scm.com'
#endregion requirements

#region main
total=()
for repo in "$@"; do
  printf '\n'

  cd "${repo}" || cd_error "${repo}"
  printf '%s:\n' "${PWD}"

  i=0
  for f in $(git ls-files); do
    current[${i}]="${PWD}/${f}"
    ((i++))
  done

  total=("${total[@]}" "${current[@]}")

  printf '%s\n' "${current[@]}" | xargs cloc
done

if [ $# -gt 1 ]; then
  printf '\nTotal:\n'
  printf '%s\n' "${total[@]}" | xargs cloc
fi

exit 0
#endregion main
