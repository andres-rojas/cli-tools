#!/usr/bin/env bash

#region helper functions
basename() {
  : "${1%/}"
  printf '%s\n' "${_##*/}"
}

log() {
  [[ "${verbose}" == "true" ]] && printf '%s\n' "${1}"
}

show_help() {
  name=$(basename "${0}")
  cat <<EOF
${name} will check which ciphers are accepted by the given HOST.

Usage:
  ${name} [options] HOST
  ${name} -h | --help | -?

Options:
  -d SECONDS, --delay SECONDS  Number of seconds delay between each check
  -v, --verbose                Verbose output
  -h, --help, -?               Show this help message
EOF
  exit 0
}
#endregion helper functions

#region option parsing
# Option defaults
delay=1
verbose="false"

# Options parsing
POSITIONAL=()
while [[ $# -gt 0 ]]; do
  case $1 in
    -\?|-h|--help)
      show_help
      ;;
    -d|--delay)
      delay="${2}"
      shift
      shift
      ;;
    -v|--verbose)
      verbose="true"
      shift
      ;;
    *)
      POSITIONAL+=("$1")
      shift
  esac
done
set -- "${POSITIONAL[@]}"

[[ $# -eq 0 ]] && show_help
#endregion option parsing

#region requirements
require() {
  name="${2:-${1}}"
  command -v "${1}" >/dev/null 2>&1 || {
    printf 'The %s tool is required to use this script!\n' "${name}" >&2
    [[ -z "${3}" ]] || printf '\tSee: %s\n' "${3}" >&2
    exit 1
  }
}

require 'cut'
require 'openssl' 'openssl' 'https://openssl.org/'
require 'sleep'
require 'tr'
#endregion requirements

#region main
host="${1}:443" # OpenSSL requires an explicit port number

# shellcheck disable=SC2207
# `mapfile` or `read -a` would be nice, if they were available by default
ciphers=($(openssl ciphers 'ALL:eNULL' | tr ':' ' '))
log "Obtaining cipher list from $(openssl version)"
log "${#ciphers[@]} ciphers found!"

for cipher in "${ciphers[@]}"; do
  log
  printf '%s ' "${cipher}"

  result=$(echo -n | openssl s_client -cipher "${cipher}" -connect "${host}" 2>&1)

  # shellcheck disable=SC2076
  if [[ "${result}" =~ "Cipher is ${cipher}" || "${result}" =~ "Cipher    :" ]]; then
    printf '\033[92m(✔)\033[39m\n'
  else
    if [[ "${result}" =~ ":error:" ]]; then
      printf '\033[91m(✘)\033[39m\n'
      log "$(printf '%s\n' "${result}" | cut -d':' -f6)"
    else
      printf '\033[93m(⚠  Unknown response)\033[39m\n'
      log "${result}"
    fi
  fi
  sleep "${delay}"
done

exit 0
#endregion main
