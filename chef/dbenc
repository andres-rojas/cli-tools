#!/usr/bin/env bash
# shellcheck disable=SC1117

basename() {
  : "${1%/}"
  printf '%s\n' "${_##*/}"
}

show_help() {
  name=$(basename "${0}")
  cat <<EOF
${name} toggles and audits encryption for Chef data bags

Usage:
  ${name} [check]             Displas whether databag encryption is enabled
  ${name} toggle              Toggles automatic databag encryption
  ${name} audit [BAG [ITEM]]  Displays whether (the given) data bag(s) are encrypted
  ${name} -h | --help | -?

Options:
  -h, --help, -?  Show this help message
EOF
  exit 0
}

# Options parsing
POSITIONAL=()
while [[ $# -gt 0 ]]; do
  case $1 in
    -\?|-h|--help)
      show_help
      exit 0
      ;;
    *)
      POSITIONAL+=("$1")
      shift
  esac
done
set -- "${POSITIONAL[@]}"

knife_config="${HOME}/.chef/knife.rb"

if [ ! -f "${knife_config}" ]; then
  printf '%s not found!' "${knife_config}"
  exit 1
fi

base_prefix="^[[:space:]]*"
disabled_prefix="${base_prefix}#[[:space:]]*"

edbs_enabled="${base_prefix}encrypted_data_bag_secret"
edbs_disabled="${disabled_prefix}encrypted_data_bag_secret"
ksf_enabled="${base_prefix}knife\[:secret_file]"
ksf_disabled="${disabled_prefix}knife\[:secret_file]"

check_encryption() {
  if grep -q "${edbs_disabled}" "${knife_config}"; then
    if grep -q "${ksf_disabled}" "${knife_config}"; then
      printf "Encryption disabled!\n"
    else
      printf "Encryption mismatch!\n"
    fi
  elif grep -q "${edbs_enabled}" "${knife_config}"; then
    if grep -q "${ksf_enabled}" "${knife_config}"; then
      printf "Encryption enabled!\n"
    else
      printf "Encryption mismatch!\n"
    fi
  else
    printf "Encryption state unknown!\n"
  fi
}

toggle_encryption() {
  state=$(check_encryption | awk '{print $2}' | tr -d '!$')

  if [ "${state}" == "disabled" ]; then
    sed -i '' "s/${edbs_disabled}/encrypted_data_bag_secret/" "${knife_config}"
    sed -i '' "s/${ksf_disabled}/knife\[:secret_file]/" "${knife_config}"
    check_encryption
  elif [ "${state}" == "enabled" ]; then
    sed -i '' "s/${edbs_enabled}/# encrypted_data_bag_secret/" "${knife_config}"
    sed -i '' "s/${ksf_enabled}/# knife\[:secret_file]/" "${knife_config}"
    check_encryption
  else
    printf 'Unable to toggle! [%s]' "$(check_encryption)" >&2
    exit 1
  fi
}

check_knife() {
  command -v "knife" >/dev/null 2>&1 || {
    printf 'knife is required to use this command!' >&2
    exit 1
  }

}

audit_encryption() {
  initial_state=$(check_encryption | awk '{print $2}' | tr -d '!$')

  if [ "${initial_state}" != "disabled" ]; then
    toggle_encryption
    printf '\n'
  fi

  item="${2}"

  for bag in ${1:-$(knife data bag list 2>/dev/null)}; do
    for item in ${2:-$(knife data bag show "${bag}" 2>/dev/null)}; do
      printf 'Checking %s/%s... ' "${bag}" "${item}"

      if knife data bag show "${bag}" "${item}" 2>/dev/null | grep -q encrypted_data; then
        printf '\033[1;32mEncrypted!\033[0;39m\n'
      else
        printf '\033[1;31mNOT encrypted!\033[0;39m\n'
      fi
    done
    printf '\n'
  done

  if [ "${initial_state}" != "disabled" ]; then
    toggle_encryption
  fi
}

case "${1}" in
  toggle)
    toggle_encryption
    exit 0
    ;;
  check|'')
    check_encryption
    exit 0
    ;;
  audit)
    check_knife
    audit_encryption "${2}" "${3}"
    exit 0
    ;;
  *)
    printf 'Unknown command: %s\n' "${1}" >&2
    printf '\n'
    show_help
    exit 1
    ;;
esac
